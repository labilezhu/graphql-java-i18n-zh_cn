# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Brad Baker
# This file is distributed under the same license as the graphql-java
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr "Project-Id-Version: graphql-java current\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-11 19:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../schema.rst:2
msgid "Creating a schema"
msgstr "创建Schema"

#: ../../schema.rst:5
msgid ""
"A schema defines your GraphQL API by defining each field that can be "
"queried or mutated."
msgstr "Schema的主要用途是定义所有可供查询的字段（field），最终组合成GraphQL API."

#: ../../schema.rst:8
msgid ""
"``graphql-java`` offers two different ways of defining the schema: "
"Programmatically as Java code or via a special graphql dsl (called IDL)."
msgstr ""

#: ../../schema.rst:11
msgid ""
"NOTE: IDL is not currently part of the `formal graphql spec "
"<https://facebook.github.io/graphql/#sec-Appendix-Grammar-Summary.Query-"
"Document>`_. The implementation in this library is based off the "
"`reference implementation <https://github.com/graphql/graphql-js>`_.  "
"However plenty of code out there is based on this IDL syntax and hence "
"you can be fairly confident that you are building on solid technology "
"ground."
msgstr ""

#: ../../schema.rst:16
msgid "If you are unsure which option to use we recommend the IDL."
msgstr ""

#: ../../schema.rst:18
msgid "IDL example:"
msgstr ""

#: ../../schema.rst:27
msgid "Java code example:"
msgstr ""

#: ../../schema.rst:39
msgid "DataFetcher and TypeResolver"
msgstr ""

#: ../../schema.rst:41
msgid ""
"A ``DataFetcher`` provides the data for a field (and changes something, "
"if it is a mutation)."
msgstr ""

#: ../../schema.rst:43
msgid ""
"Every field definition has a ``DataFetcher``. When one is not configured,"
" a `PropertyDataFetcher <https://github.com/graphql-java/graphql-"
"java/blob/master/src/main/java/graphql/schema/PropertyDataFetcher.java>`_"
" is used."
msgstr ""

#: ../../schema.rst:46
msgid ""
"``PropertyDataFetcher`` fetches data from ``Map`` and Java Beans. So when"
" the field name matches the Map key or the property name of the source "
"Object, no ``DataFetcher`` is needed."
msgstr ""

#: ../../schema.rst:49
msgid ""
"A ``TypeResolver`` helps ``graphql-java`` to decide which type a concrete"
" value belongs to. This is needed for ``Interface`` and ``Union``."
msgstr ""

#: ../../schema.rst:52
msgid ""
"For example imagine you have a ``Interface`` called *MagicUserType* and "
"it resolves back to a series of Java classes called perhaps *Wizard*, "
"*Witch* and *Necromancer*.  The type resolver is responsible for "
"examining a runtime object and deciding what ``GraphqlObjectType`` should"
" be used to represent it and hence what data fetchers and fields will be "
"invoked."
msgstr ""

#: ../../schema.rst:75
msgid "IDL"
msgstr ""

#: ../../schema.rst:77
msgid ""
"When defining a schema via IDL, you provide the needed ``DataFetcher`` "
"and ``TypeResolver`` when the schema is created:"
msgstr ""

#: ../../schema.rst:80 ../../schema.rst:228
msgid "Example:"
msgstr ""

#: ../../schema.rst:126
msgid "You could generate an executable schema via"
msgstr ""

#: ../../schema.rst:140
msgid ""
"The static schema definition file has the field and type definitions but "
"you need a runtime wiring to make it a truly executable schema."
msgstr ""

#: ../../schema.rst:143
msgid ""
"The runtime wiring contains ``DataFetcher``s, ``TypeResolvers``s and "
"custom ``Scalar``s that are needed to make a fully executable schema."
msgstr ""

#: ../../schema.rst:146
msgid "You wire this together using this builder pattern"
msgstr ""

#: ../../schema.rst:176
msgid ""
"There is a another way to wiring in type resolvers and data fetchers and "
"that is via the ``WiringFactory`` interface.  This allow for a more "
"dynamic runtime wiring since the IDL definitions can be examined in order"
" to decide what to wire in. You could for example look at IDL directives "
"to help you decide what runtime to create or some other aspect of the IDL"
" definition."
msgstr ""

#: ../../schema.rst:223
msgid "Programmatically"
msgstr ""

#: ../../schema.rst:225
msgid ""
"When the schema is created programmatically you provide the "
"``DataFetcher`` and ``TypeResolver`` when the type is created:"
msgstr ""

#: ../../schema.rst:250
msgid "Types"
msgstr ""

#: ../../schema.rst:252
msgid "The GraphQL type system supports the following kind of types:"
msgstr ""

#: ../../schema.rst:254 ../../schema.rst:264
msgid "Scalar"
msgstr ""

#: ../../schema.rst:255 ../../schema.rst:284
msgid "Object"
msgstr ""

#: ../../schema.rst:256 ../../schema.rst:314
msgid "Interface"
msgstr ""

#: ../../schema.rst:257 ../../schema.rst:338
msgid "Union"
msgstr ""

#: ../../schema.rst:258
msgid "InputObject"
msgstr ""

#: ../../schema.rst:259 ../../schema.rst:373
msgid "Enum"
msgstr ""

#: ../../schema.rst:266
msgid "``graphql-java`` supports the following Scalars:"
msgstr ""

#: ../../schema.rst:269
msgid "``GraphQLString``"
msgstr ""

#: ../../schema.rst:270
msgid "``GraphQLBoolean``"
msgstr ""

#: ../../schema.rst:271
msgid "``GraphQLInt``"
msgstr ""

#: ../../schema.rst:272 ../../schema.rst:277
msgid "``GraphQLFloat``"
msgstr ""

#: ../../schema.rst:273
msgid "``GraphQLID``"
msgstr ""

#: ../../schema.rst:274
msgid "``GraphQLLong``"
msgstr ""

#: ../../schema.rst:275
msgid "``GraphQLShort``"
msgstr ""

#: ../../schema.rst:276
msgid "``GraphQLByte``"
msgstr ""

#: ../../schema.rst:278
msgid "``GraphQLBigDecimal``"
msgstr ""

#: ../../schema.rst:279
msgid "``GraphQLBigInteger``"
msgstr ""

#: ../../schema.rst:286 ../../schema.rst:316 ../../schema.rst:340
#: ../../schema.rst:375 ../../schema.rst:402
msgid "IDL Example:"
msgstr ""

#: ../../schema.rst:296 ../../schema.rst:324 ../../schema.rst:349
#: ../../schema.rst:386 ../../schema.rst:411
msgid "Java Example:"
msgstr ""

#: ../../schema.rst:400
msgid "ObjectInputType"
msgstr ""

#: ../../schema.rst:424
msgid "Type References (recursive types)"
msgstr ""

#: ../../schema.rst:426
msgid ""
"GraphQL supports recursive types: For example a ``Person`` can contain a "
"list of friends of the same type."
msgstr ""

#: ../../schema.rst:428
msgid ""
"To be able to declare such a type, ``graphql-java`` has a "
"``GraphQLTypeReference`` class."
msgstr ""

#: ../../schema.rst:430
msgid ""
"When the schema is created, the ``GraphQLTypeReference`` is replaced with"
" the actual real type Object."
msgstr ""

#: ../../schema.rst:432
msgid "For example:"
msgstr ""

#: ../../schema.rst:443
msgid ""
"When the schema is declared via IDL, no special handling of recursive "
"types is needed."
msgstr ""

#: ../../schema.rst:446
msgid "Modularising the Schema IDL"
msgstr ""

#: ../../schema.rst:448
msgid ""
"Having one large schema file is not always viable.  You can modularise "
"you schema using two techniques."
msgstr ""

#: ../../schema.rst:450
msgid ""
"The first technique is to merge multiple Schema IDL files into one logic "
"unit.  In the case below the schema has been split into multiple files "
"and merged all together just before schema generation."
msgstr ""

#: ../../schema.rst:471
msgid ""
"The Graphql IDL type system has another construct for modularising your "
"schema.  You can use `type extensions` to add extra fields and interfaces"
" to a type."
msgstr ""

#: ../../schema.rst:474
msgid "Imagine you start with a type like this in one schema file."
msgstr ""

#: ../../schema.rst:483
msgid "Another part of your system can extend this type to add more shape to it."
msgstr ""

#: ../../schema.rst:494
msgid ""
"You can have as many extensions as you think sensible.  They will be "
"combined in the order in which they are encountered.  Duplicate fields "
"will be merged as one (however field re-definitions into new types are "
"not allowed)."
msgstr ""

#: ../../schema.rst:505
msgid ""
"With all these type extensions in place the `Human` type now looks like "
"this at runtime."
msgstr ""

#: ../../schema.rst:517
msgid ""
"This is especially useful at the top level.  You can use extension types "
"to add new fields to the top level schema \"query\".  Teams could "
"contribute \"sections\" on what is being offered as the total graphql "
"query."
msgstr ""

#: ../../schema.rst:550
msgid "Subscription Support"
msgstr ""

#: ../../schema.rst:552
msgid ""
"Subscriptions are not officially specified yet: ``graphql-java`` supports"
" currently a very basic implementation where you can define a "
"subscription in the schema with "
"``GraphQLSchema.Builder.subscription(...)``. This enables you to handle a"
" subscription request:"
msgstr ""

